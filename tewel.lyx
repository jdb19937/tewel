#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass amsart
\use_default_options true
\begin_modules
theorems-ams
eqs-within-sections
figs-within-sections
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
tewel: a command-line neural synthesizer
\end_layout

\begin_layout Author
Dan Brumleve
\begin_inset Newline newline
\end_inset

MakeMore Software, Inc.
\end_layout

\begin_layout Email
dan@makemoresoftware.com
\end_layout

\begin_layout Abstract
This is an abstract abstract.
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Installing Tewel
\end_layout

\begin_layout Subsection
Prerequisites
\end_layout

\begin_layout Subsubsection*
Required for Compilation
\end_layout

\begin_layout Standard
g++, GNU Make.
\end_layout

\begin_layout Subsubsection*
Optional
\end_layout

\begin_layout Standard
CUDA Toolkit, SDL 2.0, FFmpeg, ImageMagick, perl 5.
\end_layout

\begin_layout Subsection
Compile Source and Install
\end_layout

\begin_layout Subsubsection*
Clone from GitHub
\end_layout

\begin_layout Standard
You can obtain the source code for 
\family typewriter
tewel
\family default
 by cloning the GitHub repository:
\end_layout

\begin_layout Verbatim
$ git clone --branch 0.4 https://github.com/jdb19937/tewel tewel-0.4
\end_layout

\begin_layout Subsubsection*
Download from MakeMore Software
\end_layout

\begin_layout Standard
Or, you can download a tarball directly from the MakeMore Software website.
\end_layout

\begin_layout Verbatim
$ wget https://makemoresoftware.com/download/tewel-0.4.tar.gz
\end_layout

\begin_layout Verbatim
$ tar -xzvf tewel-0.4.tar.gz
\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Paragraph*
Once you have the source directory cloned or unpacked, 
\family typewriter
cd
\family default
 into it and run 
\family typewriter
make
\family default
:
\end_layout

\begin_layout Verbatim
$ cd tewel-0.4
\end_layout

\begin_layout Verbatim
$ make
\end_layout

\begin_layout Verbatim

\end_layout

\begin_layout Standard
When it has finished, run 
\family typewriter
make install
\family default
 as super-user to install the software and examples:
\end_layout

\begin_layout Verbatim
$ sudo make install
\end_layout

\begin_layout Verbatim

\end_layout

\begin_layout Subsection
Install Debian Package
\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Paragraph*
Alternatively you can skip the previous steps, download a pre-built Debian
 package instead, and install that:
\end_layout

\begin_layout Verbatim
$ wget https://makemoresoftware.com/download/tewel_0.4-1_amd64.deb
\end_layout

\begin_layout Verbatim
$ dpkg -i tewel_0.4-1_amd64.deb
\end_layout

\begin_layout Subsection
Verify Installation
\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Paragraph*
If everything worked, 
\family typewriter
tewel
\family default
 is installed in 
\family typewriter
/opt/makemore/bin
\family default
:
\end_layout

\begin_layout Verbatim
$ ls /opt/makemore/bin/tewel
\end_layout

\begin_layout Verbatim
/opt/makemore/bin/tewel
\end_layout

\begin_layout Standard
To invoke 
\family typewriter
tewel
\family default
 without using its full path, like the examples in this manual, add 
\family typewriter
/opt/makemore/bin
\family default
 to your 
\family typewriter
PATH
\family default
 environment variable:
\end_layout

\begin_layout Verbatim
$ export PATH=
\begin_inset Quotes erd
\end_inset

/opt/makemore/bin:$PATH
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
To make this change persistent, append the same command to your 
\family typewriter
.bashrc
\family default
 file.
\end_layout

\begin_layout Subsection
Support
\end_layout

\begin_layout Standard
Please report any issues to 
\bar under
dan@makemoresoftware.com
\bar default
.
\end_layout

\begin_layout Section
Creating Convolutional Neural Networks
\end_layout

\begin_layout Paragraph*
A convolutional neural network consists of a sequence of 
\emph on
layers
\emph default
.
 
\family typewriter
tewel
\family default
 supports 1x1, 3x3, 5x5, and 7x7 convolutional layers, linear-rectifier
 and absolute-value activation layers, and 2x, 4x, and 8x upscaling and
 downscaling layers.
 Layers have flat toroidal topology – the edges wrap around, like in the
 game Asteroids.
 Each layer is configured with a number of input and output 
\emph on
channels
\emph default
, such that each layer has a number of output channels equal to the number
 of input channels of the following layer.
 Neural networks created with 
\family typewriter
tewel
\family default
 are defined by a 
\emph on
spec
\emph default
, which is a text file that looks like this:
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Verbatim
$ cat /opt/makemore/share/tewel/example.txt
\end_layout

\begin_layout Verbatim
v=2
\end_layout

\begin_layout Verbatim
type=con1 in=3 out=16
\end_layout

\begin_layout Verbatim
type=relu in=16 out=16
\end_layout

\begin_layout Verbatim
type=con1 in=16 out=16
\end_layout

\begin_layout Verbatim
type=relu in=16 out=16
\end_layout

\begin_layout Verbatim
type=con1 in=16 out=16
\end_layout

\begin_layout Verbatim
type=relu in=16 out=16
\end_layout

\begin_layout Verbatim
type=con1 in=16 out=16
\end_layout

\begin_layout Verbatim
type=relu in=16 out=16
\end_layout

\begin_layout Verbatim
type=con1 in=16 out=3
\end_layout

\begin_layout Paragraph*
This spec defines a sequence of five 3x3 convolutions (
\family typewriter
con1
\family default
) interspersed with linear rectifiers (
\family typewriter
relu
\family default
).
 The first layer has 3 input channels and the last has 3 output channels.
 The intermediate layers have 16-channel input and output.
 The first line in the spec is a header, specifying a required magic version
 number 
\family typewriter
v=2
\family default
.
 The header can also contain default training and initialization parameters.
 The neural network itself is stored in a separate binary 
\emph on
cortex
\emph default
 file (
\family typewriter
\series medium
.ctx
\family default
\series default
) which is created by 
\family typewriter
\series medium
tewel
\family default
\series default
 from the spec:
\end_layout

\begin_layout Verbatim
$ tewel make example.ctx spec=/opt/makemore/share/tewel/example.txt
\end_layout

\begin_layout Paragraph*
All of the information in the spec is also in the cortex file, and tewel
 can reproduce the spec from it.
 Default values have been assigned to some header parameters governing training,
 reporting, and initialization.
 Later we'll discuss these parameters in detail.
\end_layout

\begin_layout Verbatim
$ tewel spec example.ctx
\end_layout

\begin_layout Verbatim
v=2 decay=0.01 nu=0.0001 b1=0.1 b2=0.001 eps=1e-08 rdev=0.25
\end_layout

\begin_layout Verbatim
type=con1 in=3 out=16
\end_layout

\begin_layout Verbatim
type=relu in=16 out=16
\end_layout

\begin_layout Verbatim
type=con1 in=16 out=16
\end_layout

\begin_layout Verbatim
type=relu in=16 out=16
\end_layout

\begin_layout Verbatim
type=con1 in=16 out=16
\end_layout

\begin_layout Verbatim
type=relu in=16 out=16
\end_layout

\begin_layout Verbatim
type=con1 in=16 out=16
\end_layout

\begin_layout Verbatim
type=relu in=16 out=16
\end_layout

\begin_layout Verbatim
type=con1 in=16 out=3 
\end_layout

\begin_layout Verbatim

\end_layout

\begin_layout Paragraph*
Neural networks created with 
\family typewriter
tewel
\family default
 have three different roles: 
\emph on
generator
\emph default
, 
\emph on
discriminator
\emph default
, or 
\emph on
encoder
\emph default
.
 The generator is given some input and learns to produce some desirable
 output.
 An optional encoder functions as a front-end to the generator – they are
 trained together, with the same effect as training a generator with the
 encoder layers prepended, the use being that it is possible to extract
 the encoder output for purposes of compression or representation.
 A discriminator provides an alternate loss function to the generator by
 learning to separate the generator output from a target data set.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Paragraph*
The number of output channels of the encoder, if present, must match the
 number of input channels of the generator.
 Command 
\family typewriter
learnstyl
\family default
 requires a discriminator with a number of input channels equal to the number
 of output channels of the generator.
 Command 
\family typewriter
learnhans
\family default
 requires a discriminator with a number of input channels equal to the number
 of output channels of the generator plus the number of input channels of
 the encoder (or if not present, of the generator).
 Otherwise there are no constraints on the design of a neural network with
 respect to its role.
 The 
\family typewriter
learnfunc
\family default
 and 
\family typewriter
learnauto
\family default
 commands train a generator (or an encoder-generator) without a discriminator,
 simply subtracting output from target to calculate loss.
\end_layout

\begin_layout Paragraph*
Every 
\family typewriter
tewel
\family default
 invocation consists of a command, followed by a generator argument, followed
 by some options in 
\family typewriter
key=value
\family default
 format.
 The generator argument can be the name of a cortex file (like 
\family typewriter
example.ctx
\family default
 created above), and for commands that refer to an existing generator the
 argument can be a 
\emph on
project
\emph default
 directory containing a cortex file named 
\family typewriter
gen.ctx
\family default
.
 A project is an optional way to associate a generator with an encoder and
 a discriminator.
 A project may contain a file named 
\family typewriter
opt.txt
\family default
 containing one line of 
\family typewriter
key=value
\family default
 options specifying the location of the training data and method-specific
 parameters; this allows the training commands to be invoked with only the
 project directory and no extra options.
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Synthesizing and Learning
\end_layout

\begin_layout Paragraph*
The synth commands reads data from an input source, sends it through a generator
, and places the output somewhere else.
 Let's try it with the 
\family typewriter
example.ctx
\family default
 file we created, which is already initialized with random weights.
\end_layout

\begin_layout Verbatim
$ tewel synth example.ctx src=/opt/makemore/tewel/share/dan.png out=example.png
\end_layout

\begin_layout Paragraph*
The result might look something like this.
 Or it might be a solid color, or have noisy textures.
 
\begin_inset Newline newline
\end_inset


\begin_inset Graphics
	filename manual-fig1.png
	scale 50

\end_inset


\end_layout

\begin_layout Paragraph*
tewel has built-in support for the PPM image format (
\family typewriter
.ppm
\family default
), raw 8-bit-per-value RGB files (
\family typewriter
.rgb
\family default
), and raw double-precision data files (
\family typewriter
.dat
\family default
).
 Built-in formats can be concatenated to represent raw video frame sequences.
 The 
\family typewriter
picreader
\family default
, 
\family typewriter
picwriter
\family default
, 
\family typewriter
vidreader
\family default
, and 
\family typewriter
vidwriter
\family default
 options can be assigned the path of a script to perform format conversion.
 Default scripts 
\family typewriter
picreader.pl
\family default
, 
\family typewriter
picwriter.pl
\family default
, 
\family typewriter
vidreader.pl
\family default
 and 
\family typewriter
vidwriter.pl
\family default
 are installed in 
\family typewriter
/opt/makemore/share
\family default
, extending support to a variety of image and video formats with ImageMagick
 and ffmpeg.
 The above example requires ImageMagick to be installed for 
\family typewriter
picreader.pl
\family default
 and 
\family typewriter
picwriter.pl
\family default
 to decode and encode the PNG files.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Paragraph*
Now let's try training it to reproduce its input, from a single image with
 a 8x8 patch size.
\end_layout

\begin_layout Verbatim
$ tewel learnauto example.ctx src=/opt/makemore/share/tewel/dan.png dim=8x8
\end_layout

\begin_layout Verbatim
gen=example.ctx genrounds=64 dt=0.0907309 genrms=0.417825
\end_layout

\begin_layout Verbatim
gen=example.ctx genrounds=128 dt=0.060941 genrms=0.327466
\end_layout

\begin_layout Verbatim
gen=example.ctx genrounds=192 dt=0.060957 genrms=0.230874
\end_layout

\begin_layout Verbatim
gen=example.ctx genrounds=256 dt=0.0602391 genrms=0.181224
\end_layout

\begin_layout Verbatim
gen=example.ctx genrounds=320 dt=0.0606279 genrms=0.146288
\end_layout

\begin_layout Verbatim
gen=example.ctx genrounds=384 dt=0.0599592 genrms=0.119872
\end_layout

\begin_layout Verbatim
[...]
\end_layout

\begin_layout Verbatim
gen=example.ctx genrounds=6912 dt=0.0594611 genrms=0.0246048
\end_layout

\begin_layout Verbatim
gen=example.ctx genrounds=6976 dt=0.0601001 genrms=0.0219939
\end_layout

\begin_layout Verbatim
gen=example.ctx genrounds=7040 dt=0.0603499 genrms=0.0215087
\end_layout

\begin_layout Verbatim
gen=example.ctx genrounds=7104 dt=0.0607641 genrms=0.0219187
\end_layout

\begin_layout Verbatim
gen=example.ctx genrounds=7168 dt=0.0601418 genrms=0.0203409
\end_layout

\begin_layout Verbatim
^C
\end_layout

\begin_layout Paragraph*
The error fell to 
\begin_inset Formula $0.02$
\end_inset

, or 
\begin_inset Formula $2\%$
\end_inset

 of the difference between black and white.
 What does it look like now? If you are working locally, you can try sending
 the output to your display with the 
\family typewriter
outkind=sdl
\family default
 option.
 The prefix 
\family typewriter
//
\family default
 expands to 
\family typewriter
/opt/makemore/share
\family default
 as a shortcut.
\end_layout

\begin_layout Verbatim
$ tewel synth example.ctx src=//dan.png outkind=sdl
\end_layout

\begin_layout Paragraph*
\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Graphics
	filename manual-fig2.png
	scale 50

\end_inset


\end_layout

\begin_layout Paragraph*
Not very colorful, but much better! We should expect this generator to approach
 a perfect reconstruction with more training because there is an exact solution;
 the generator can simply copy each pixel value forward to the next layer
 (using a weight value of 
\begin_inset Formula $1$
\end_inset

), and ignore all neighboring pixels and color channels (using a weight
 value of 
\begin_inset Formula $0$
\end_inset

).
 There are other solutions and the generator isn't guaranteed to learn that
 particular one; perhaps the first layer shifts the image one pixel to the
 left, and the last layer shifts it back to the right.
 But a valid intuition, based on assumptions of convexity, is that a function
 should be learnable if there is an exact solution.
\end_layout

\begin_layout Paragraph*
Let's try synthesizing from the pretrained upscaler cortex included in the
 distribution.
 First we'll degrade the image with ImageMagick by scaling it down and up
 again, replacing every pixel value in each 4x4 block with the block's average.
 Then we'll feed that image into the synthesizer.
\end_layout

\begin_layout Verbatim
$ convert /opt/makemore/share/tewel/dan.png -scale 25% - |convert - -scale
 400% png:dan.4x.png
\end_layout

\begin_layout Verbatim
$ tewel synth //upscale4x.ctx src=//dan.png out=dan.restored.png
\end_layout

\begin_layout Paragraph*
\begin_inset Graphics
	filename manual-fig3.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Part
Synthesis
\end_layout

\begin_layout Section
Input From Video File
\end_layout

\begin_layout Section
Input From Image File
\end_layout

\begin_layout Section
Input From Camera
\end_layout

\begin_layout Section
Output To Display
\end_layout

\begin_layout Section
Output To Image File
\end_layout

\begin_layout Section
Ouptut To Video File
\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Part
Precomputing
\end_layout

\begin_layout Section
Input From Directory
\end_layout

\begin_layout Section
Output To Raw Data File
\end_layout

\begin_layout Section
Learning From Raw Data File
\end_layout

\begin_layout Section
Creating Paired Collections
\end_layout

\begin_layout Subsection
Traversal By Reference
\end_layout

\begin_layout Subsection
Fixed Random Seeding
\end_layout

\begin_layout Section
Filtering
\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Part
Designing A Generator
\end_layout

\begin_layout Section
Spec Files
\end_layout

\begin_layout Section
Cortex Files
\end_layout

\begin_layout Section
Convolutional and Activation Layers
\end_layout

\begin_layout Section
Compressing Encoder/Generator
\end_layout

\begin_layout Section
Scaling Layers
\end_layout

\begin_layout Section
Styling Generator/Discriminator
\end_layout

\begin_layout Section
Enhancing Generator/Discriminator
\end_layout

\begin_layout Section
Super-Resolution Generator
\end_layout

\begin_layout Section
Noise Injection
\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Part
Examples
\end_layout

\begin_layout Section
colorizer
\end_layout

\begin_layout Section
upscale4x
\end_layout

\begin_layout Section
starry
\end_layout

\begin_layout Section
benny
\end_layout

\begin_layout Section
trolly
\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\end_body
\end_document
